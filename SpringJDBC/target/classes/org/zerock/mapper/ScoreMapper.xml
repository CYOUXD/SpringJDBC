<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <!-- namespace의 경로는 마이바티스 설정 인터페이스의 경로(이름까지)를 집어 넣는다. -->
  <mapper namespace="org.zerock.mapper.ScoreMapper">
  	<!-- 마이바티스는 내부적으로 JDBC의 pstmt를 활용하고 ?를 #{속성}으로 처리한다. -->
  	<!-- id 속성 값은 인터페이스의 메서드의 이름과 동일하게 작성해야 한다. -->
  	<!-- 여러 값을 전달하고 싶다면 1) 커맨드 객체(VO)를 사용하거나 또는 2)parameterType으로 Map을 지정한다. -->
  	<insert id="insert" parameterType="org.zerock.command.ScoreVO" keyProperty="true">
  		insert into score01(num, name, kor, eng, math) 
  		values (score01_seq.nextval, #{name}, #{kor}, #{eng}, #{math})
  	</insert>
  	
  	<insert id="insert2" parameterType="java.util.Map" keyProperty="true"><!-- keyProperty : 인서트와 업데이트에서만 사용. 반환타입 지정할 때 사용. -->
  		insert into score01(num, name, kor, eng, math) 
  		values (score01_seq.nextval, #{p1}, #{p2}, #{p3}, #{p4})
  	</insert>
  	
  	<!-- resultType 속성의 값은 select의 결과를 특정 객체로 만들어서 반환 = 반환 타입 -->
  	<!-- VO에 기술된 멤버변수의 DB의 컬럼 명과 정확히 일치해야 합니다. -->
  	<select id="select" resultType="org.zerock.command.ScoreVO">
  		select * from score01
  	</select>
  	
  	<!-- 단일 값의 매핑은 그냥 처리하면 됨 -->
  	<delete id="delete">
  		delete from score01 where num=#{num}
  	</delete>
  </mapper>