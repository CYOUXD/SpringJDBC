<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- 
	root context.xml에는 일반적으로 DB 관련된 설정이 들어간다.
	기본적으로 classpath의 경로를 WEB-INF 아래에 있는 classes 폴더 경로로 잡도록 설정되어 있음
	 -->
	 
	 <!-- 1. 빈 생성 -->
	 <!-- 기본적으로 classpath의 경로가 src/main/resources를 가리킴 -->
	 <bean id="DBproperties" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"><!-- @deprecated된 클래스이다. -->
	 	<property name="location" value="classpath:DBproperties/Hikari.properties" />
	 	<!-- classpath: = WEB-INF 아래의 classes 폴더를 의미함 - 낮은 버전의 경로라서 지금과 다름. 위가 맞음 -->
	 	<!-- 2. DBproperties폴더에 히카리 설정 관련 파일을 넣어 준다. -->
	 	
	 </bean>
	 <bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
	 <!-- 3. DBproperties폴더에 히카리 설정 관련 파일로 만들어준 값을 불러온다. -->
	 	<property name="driverClassName" value="${ds.driverClassName}" />
	 	<property name="jdbcUrl" value="${ds.url}" />
	 	<property name="username" value="${ds.username}" />
	 	<property name="password" value="${ds.password}" />
	 	<property name="maximumPoolSize" value="10" /> <!-- 기본값 10 -->
	 	<property name="maxLifetime" value="1800000" />
	 </bean>
	 
	 <!-- 사용할 CP는 가장 많이 사용하는 Hikari CP 빈 등록하기 -->
	 <!-- <bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
	 	<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
	 	<property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521/XEPDB1" />
	 	<property name="username" value="spring" />
	 	<property name="password" value="spring" />
	 </bean> -->
	 
	 <!-- 데이터 소스 설정 -->
	 <bean id="ds" class="com.zaxxer.hikari.HikariDataSource">
	 	<constructor-arg ref="hikariConfig"/>
	 </bean>
	 
	 <!-- jdbc Template 사용을 위한 bean 추가 -->
	 <!-- jdbcTemplate 이름으로 객체 생성하고 의존성 주입 -->
	 <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
	 	<property name="dataSource" ref="ds" />
	 </bean>
	 
	 <!-- MyBatis의 사용의 핵심 객체 sqlSessionFactory 추가 -->
	 <!-- 
	 세션 팩토리는 내부적으로 DB와 연결해주고 pstmt와 SQL 문을 바인딩 처리. 반복적인 close()작업 처리
	 개발자 코드량을 줄이며 효율적으로 작업 처리 가능
	  -->
	 <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	 	<property name="dataSource" ref="ds" />
	 	<!-- 어디에 메퍼로케이션을 넣을지 수동 설정 -->
	 	<!-- <property name="mapperLocations" value="classpath:org/zerock/mapper/**/*.xml" /> -->
	 </bean>
	 
	 <!-- MyBatis의 테스트 매퍼 : 마이바티스가 정상적으로 동작하는지 확인용 -->
	 <mybatis-spring:scan base-package="org.zerock.testmapper"/>
	 
	 <!-- MyBatisScore 테스트 할 때 사용할 ScoreMapper.xml가 있는 패키지 연결 -->
	 <mybatis-spring:scan base-package="org.zerock.mapper"/>
</beans>
